pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/tonebarbosa/cogsi-1190404-1191106-1190699.git'
            }
        }


        stage('Assemble') {
            steps {
                dir ('CS02/tut-rest-gradle') {
                 sh './gradlew build'
                }
            }
        }

        stage('Test') {
            steps {
                dir ('CS02/tut-rest-gradle') {
                    sh './gradlew integrationTest'
                }
            }
            post {
                always {
                    dir ('CS02/tut-rest-gradle/app') {
                      junit '**/build/test-results/integrationTest/binary/output.bin'
                    }
                }
            }
        }

        stage('Archive') {
            steps {
                dir ('CS02/tut-rest-gradle') {
                    archiveArtifacts artifacts: '**/build/libs/*.jar', fingerprint: true
                }
            }
        }

        stage('Deploy to Production?') {
            steps {
                input 'Deploy to production?'
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('CS06/part2') {
                    sh """
                    docker build -t java-app:latest \
                    --build-arg JAR_PATH=${WORKSPACE}/CS02/tut-rest-gradle/app/build/libs/app.jar \
                    --build-arg JAR_PATH_RESOURCES=${WORKSPACE}/CS02/tut-rest-gradle/app/build/resources/main/application.properties \
                    .
                    """
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry([credentialsId: DOCKERHUB_CREDENTIALS_ID, url: 'https://index.docker.io/v1/']) {
                        docker.image("java-app:latest").push()
                    }
                }
            }
        }
        stage('Deploy Unified Container') {
                    steps {
                        ansiblePlaybook(
                            playbook: '${WORKSPACE}/CS06/part2/deploy.yml',
                            inventory: '${WORKSPACE}/CS06/part2/hosts.ini',
                            colorized: true,
                            extraVars: [
                                docker_image: "java-app:latest"
                            ]
                        )
                    }
                }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
            script {
                def tagName = "stable-v${env.BUILD_NUMBER}"

                sh """
                git tag -a ${tagName} -m "Stable build ${tagName}"
                git push origin ${tagName}
                """
                echo "Tagged build as ${tagName}"
            }
        }
        failure {
            echo "Pipeline failed."

        }
    }
}
